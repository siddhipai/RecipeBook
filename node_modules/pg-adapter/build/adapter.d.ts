import { AdapterProps, ConnectionSettingType, Log, ResultMode, Prepared } from './types';
import { PgError } from './lib/error';
import { AdapterBase } from './lib/adapterBase';
import { Transaction } from './lib/transaction';
import { Value } from './lib/quote';
export { quote, raw } from './lib/quote';
export { parseUrl } from './lib/parseUrl';
export { Transaction, AdapterBase, AdapterProps, ResultMode, PgError, Prepared };
export declare class Adapter extends AdapterBase {
    static defaultLog: boolean | Log;
    connectionSettings: ConnectionSettingType;
    pool: number;
    connected: boolean;
    constructor({ host, port, database, user, password, pool, log, decodeTypes, }?: AdapterProps);
    static fromURL(urlOrOptions?: string | AdapterProps, options?: AdapterProps): Adapter;
    connect(): Promise<void>;
    sync: () => Promise<void> | undefined;
    close: () => Promise<void>;
    transaction(fn?: (t: Transaction) => void): Promise<unknown[]>;
    wrapperTransaction<T>(target: T, fn?: (t: T & Transaction) => void): Promise<unknown[]>;
    prepare<Args extends Value[] = Value[]>({ name, args, query, }: {
        name: string;
        args: string[];
        query: string;
    }): Prepared<Args>;
}
