import { DecodeTypes, ResultMode, Log, Task, Socket, Prepared, ResultWithFields } from '../types';
import { Value } from './quote';
export declare class AdapterBase {
    sockets: Socket[];
    decodeTypes: DecodeTypes;
    log: Log;
    task?: Task;
    lastTask?: Task;
    quote: (value: any) => string;
    raw: (value: string) => any;
    constructor({ pool, decodeTypes, log, }: {
        pool: number;
        decodeTypes: DecodeTypes;
        log: boolean | Log;
    });
    connect(): void;
    performQuery<T = any>(mode: ResultMode, query: string | Promise<string>, args?: Value, prepared?: Prepared, getFieldsInfo?: boolean): Promise<T>;
    query<T = any>(sql: string | Promise<string>, args?: Value): Promise<T>;
    queryWithFields<T = any>(sql: string | Promise<string>, args?: Value): Promise<ResultWithFields<T>>;
    objects<T = any>(sql: string | Promise<string>, args?: Value): Promise<T>;
    objectsWithFields<T = any>(sql: string | Promise<string>, args?: Value): Promise<ResultWithFields<T>>;
    arrays<T>(sql: string | Promise<string>, args?: Value): Promise<T>;
    arraysWithFields<T>(sql: string | Promise<string>, args?: Value): Promise<ResultWithFields<T>>;
    value<T>(sql: string | Promise<string>, args?: Value): Promise<T>;
    valueWithFields<T>(sql: string | Promise<string>, args?: Value): Promise<ResultWithFields<T>>;
    exec(sql: string | Promise<string>, args?: Value): Promise<any>;
}
