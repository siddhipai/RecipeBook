"use strict";
exports.__esModule = true;
exports.parseError = void 0;
var buffer_1 = require("../buffer");
var charKeyCodes = {
    S: function (error, message) { return (error.level = message); },
    M: function (error, message) { return (error.message = message); },
    D: function (error, message) { return (error.details = message); },
    C: function (error, message) { return (error.code = message); },
    H: function (error, message) { return (error.hint = message); },
    P: function (error, message) { return (error.position = message); },
    p: function (error, message) { return (error.innerPosition = message); },
    q: function (error, message) { return (error.innerQuery = message); },
    W: function (error, message) { return (error.trace = message); },
    s: function (error, message) { return (error.schema = message); },
    t: function (error, message) { return (error.table = message); },
    c: function (error, message) { return (error.column = message); },
    d: function (error, message) { return (error.dataType = message); },
    n: function (error, message) { return (error.constraint = message); },
    F: function (error, message) { return (error.file = message); },
    L: function (error, message) { return (error.line = message); },
    R: function (error, message) { return (error.process = message); },
    V: buffer_1.noop
};
var codes = {};
for (var code in charKeyCodes) {
    codes[code.charCodeAt(0)] = charKeyCodes[code];
    delete charKeyCodes[code];
}
var parseError = function (task, data, pos) {
    var error = {};
    pos += 5;
    var len = data.length;
    error.query = task.query;
    while (pos < len) {
        if (data[pos] === 0)
            break;
        var stringCode = String(data[pos]);
        var code = '';
        for (code in codes)
            if (code === stringCode)
                break;
        if (code !== stringCode)
            break;
        var nextPos = data.indexOf('\0', pos + 1) + 1;
        codes[code](error, String(data.slice(pos + 1, nextPos - 1)));
        pos = nextPos;
    }
    return error;
};
exports.parseError = parseError;
