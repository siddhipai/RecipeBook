"use strict";
exports.__esModule = true;
exports.parseDescription = void 0;
var buffer_1 = require("../buffer");
var types_1 = require("../../types");
var parseDescription = function (socket, request, data, pos) {
    var result;
    var mode = request.mode;
    var parseInfo = request.parseInfo, getFieldsInfo = request.getFieldsInfo;
    if (mode !== types_1.ResultMode.skip) {
        var columnsCount = buffer_1.decodeInt16(data, pos + 5);
        if (mode === types_1.ResultMode.value) {
            var to = data.indexOf('\0', pos + 7);
            parseInfo.type = buffer_1.decodeInt32(data, to + 7);
            if (getFieldsInfo) {
                var fieldsInfo = new Array(1);
                request.parseInfo.fieldsInfo = fieldsInfo;
                collectFieldsInfo(fieldsInfo, data, 0, to + 1, String(data.slice(pos + 7, to)), parseInfo.type);
            }
        }
        else {
            pos += 7;
            var names = new Array(columnsCount);
            var types = new Uint32Array(columnsCount);
            var fieldsInfo = void 0;
            if (getFieldsInfo) {
                fieldsInfo = new Array(columnsCount);
                request.parseInfo.fieldsInfo = fieldsInfo;
            }
            for (var c = 0; c < columnsCount; c++) {
                var to = data.indexOf('\0', pos);
                names[c] = String(data.slice(pos, to));
                types[c] = buffer_1.decodeInt32(data, to + 7);
                if (fieldsInfo) {
                    collectFieldsInfo(fieldsInfo, data, c, to + 1, names[c], types[c]);
                }
                pos = to + 19;
            }
            parseInfo.names = names;
            parseInfo.types = types;
            result = [];
        }
        parseInfo.columnsCount = columnsCount;
    }
    var resultNumber = parseInfo.resultNumber;
    if (resultNumber === 0)
        request.result = result;
    else if (resultNumber === 1)
        request.result = [request.result, result];
    else
        request.result[resultNumber] = result;
};
exports.parseDescription = parseDescription;
var collectFieldsInfo = function (fieldsInfo, data, index, pos, name, dataTypeID) {
    fieldsInfo[index] = {
        name: name,
        tableID: buffer_1.decodeInt32(data, pos + 1),
        columnID: buffer_1.decodeInt16(data, pos + 5),
        dataTypeID: dataTypeID,
        dataTypeSize: buffer_1.isPositiveInt16(data, pos + 11) ? buffer_1.decodeInt16(data, pos + 11) : -1,
        dataTypeModifier: buffer_1.decodeInt32(data, pos + 13),
        format: buffer_1.decodeInt16(data, pos + 17)
    };
};
