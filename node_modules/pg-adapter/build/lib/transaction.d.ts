import { AdapterBase } from './adapterBase';
import { Socket, Task, ResultMode, Prepared } from '../types';
import { PgError } from './error';
import { Value } from './quote';
export declare const transaction: (adapter: AdapterBase, error: PgError, fn?: ((t: Transaction) => void) | undefined) => Promise<unknown[]>;
export declare const wrapperTransaction: <T>(adapter: AdapterBase, error: PgError, target: T, fn?: ((t: T & Transaction) => void) | undefined) => Promise<unknown[]>;
export declare class Transaction extends AdapterBase {
    adapter: AdapterBase;
    error: PgError;
    promise: Promise<unknown>;
    resolve: () => void;
    reject: (err: PgError) => void;
    task?: Task;
    failed: boolean;
    constructor(adapter: AdapterBase, error: PgError);
    afterBegin: (socket: Socket, task: Task) => void;
    transaction(): Promise<unknown[]>;
    commit(): Promise<unknown>;
    rollback(): Promise<unknown>;
    end(query?: string, err?: PgError): Promise<unknown>;
    finish: (socket: Socket, task: Task) => void;
    performQuery(mode: ResultMode, query: string | Promise<string>, args?: Value, prepared?: Prepared, getFieldsInfo?: boolean): Promise<any>;
    catch: (err: PgError) => void;
    then(...args: Parameters<Promise<unknown>['then']>): void;
}
