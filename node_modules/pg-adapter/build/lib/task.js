"use strict";
exports.__esModule = true;
exports.next = exports.addTaskToAdapter = exports.createTask = void 0;
var buffer_1 = require("./buffer");
var finishTask = function (socket, task) {
    var adapter = task.adapter;
    var prepared = task.prepared;
    var prepareReady = prepared && !socket.prepared[prepared.name];
    if (!prepareReady)
        adapter.log.finish(socket, task);
    if (task.failed)
        task.reject(task.error);
    else if (!prepareReady) {
        task.resolve(task.getFieldsInfo
            ? {
                fields: task.parseInfo.fieldsInfo || [],
                result: task.result
            }
            : task.result);
    }
    socket.task = undefined;
    if (prepareReady && !task.failed) {
        socket.prepared[prepared.name] = true;
        if (adapter.task)
            task.next = adapter.task;
        else
            adapter.lastTask = task;
        adapter.task = task;
        task.parseInfo.resultNumber = 0;
    }
    else if (adapter.lastTask === task) {
        adapter.lastTask = undefined;
    }
    exports.next(adapter, socket);
};
var createTask = function (_a) {
    var adapter = _a.adapter, mode = _a.mode, query = _a.query, error = _a.error, decodeTypes = _a.decodeTypes, prepared = _a.prepared, getFieldsInfo = _a.getFieldsInfo, resolve = _a.resolve, reject = _a.reject, _b = _a.finish, finish = _b === void 0 ? finishTask : _b;
    return ({
        adapter: adapter,
        mode: mode,
        query: query,
        error: error,
        decodeTypes: decodeTypes,
        prepared: prepared,
        getFieldsInfo: getFieldsInfo,
        resolve: resolve,
        reject: reject,
        finish: finish,
        parseInfo: {
            resultNumber: 0,
            skipNextValues: false
        }
    });
};
exports.createTask = createTask;
var addTaskToAdapter = function (adapter, task) {
    if (adapter.task) {
        ;
        adapter.lastTask.next = task;
        adapter.lastTask = task;
    }
    else {
        adapter.task = task;
        adapter.lastTask = task;
        for (var _i = 0, _a = adapter.sockets; _i < _a.length; _i++) {
            var socket = _a[_i];
            if (!socket.task) {
                exports.next(adapter, socket);
                return;
            }
        }
    }
};
exports.addTaskToAdapter = addTaskToAdapter;
var queryCode = 'Q'.charCodeAt(0);
var next = function (adapter, socket) {
    var task = adapter.task;
    if (!task)
        return;
    socket.task = task;
    adapter.task = task.next;
    var query;
    if (!task.prepared || socket.prepared[task.prepared.name])
        query = task.query;
    else
        query = task.prepared.sql;
    var len = Buffer.byteLength(query) + 5;
    var buffer = Buffer.alloc(len + 1);
    buffer[0] = queryCode;
    buffer_1.encodeInt32(buffer, 1, len);
    buffer.fill(query, 5);
    buffer[len] = 0;
    adapter.log.start(socket, task);
    socket.write(buffer);
};
exports.next = next;
