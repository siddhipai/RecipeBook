"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.AdapterBase = void 0;
var net_1 = require("net");
var types_1 = require("../types");
var error_1 = require("./error");
var task_1 = require("./task");
var log_1 = require("./log");
var quote_1 = require("./quote");
var interpolate_1 = __importDefault(require("./interpolate"));
var AdapterBase = /** @class */ (function () {
    function AdapterBase(_a) {
        var pool = _a.pool, decodeTypes = _a.decodeTypes, log = _a.log;
        this.quote = quote_1.quote;
        this.raw = quote_1.raw;
        this.sockets = new Array(pool)
            .fill(null)
            .map(function () { return new net_1.Socket({ readable: true, writable: true }); });
        this.decodeTypes = decodeTypes;
        if (log === true)
            this.log = log_1.defaultLog;
        else if (log === false)
            this.log = log_1.noopLog;
        else
            this.log = log;
    }
    AdapterBase.prototype.connect = function () {
        // noop
    };
    AdapterBase.prototype.performQuery = function (mode, query, args, prepared, getFieldsInfo) {
        var _this = this;
        this.connect();
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var error, task;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!query.then) return [3 /*break*/, 2];
                        return [4 /*yield*/, query];
                    case 1:
                        query = _a.sent();
                        _a.label = 2;
                    case 2:
                        error = new error_1.PgError();
                        task = task_1.createTask({
                            mode: mode,
                            error: error,
                            resolve: resolve,
                            reject: reject,
                            prepared: prepared,
                            getFieldsInfo: getFieldsInfo,
                            adapter: this,
                            query: interpolate_1["default"](query, args),
                            decodeTypes: this.decodeTypes
                        });
                        task_1.addTaskToAdapter(this, task);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    AdapterBase.prototype.query = function (sql, args) {
        return this.performQuery(types_1.ResultMode.objects, sql, args);
    };
    AdapterBase.prototype.queryWithFields = function (sql, args) {
        return this.performQuery(types_1.ResultMode.objects, sql, args, undefined, true);
    };
    AdapterBase.prototype.objects = function (sql, args) {
        return this.performQuery(types_1.ResultMode.objects, sql, args);
    };
    AdapterBase.prototype.objectsWithFields = function (sql, args) {
        return this.performQuery(types_1.ResultMode.objects, sql, args, undefined, true);
    };
    AdapterBase.prototype.arrays = function (sql, args) {
        return this.performQuery(types_1.ResultMode.arrays, sql, args);
    };
    AdapterBase.prototype.arraysWithFields = function (sql, args) {
        return this.performQuery(types_1.ResultMode.arrays, sql, args, undefined, true);
    };
    AdapterBase.prototype.value = function (sql, args) {
        return this.performQuery(types_1.ResultMode.value, sql, args);
    };
    AdapterBase.prototype.valueWithFields = function (sql, args) {
        return this.performQuery(types_1.ResultMode.value, sql, args, undefined, true);
    };
    AdapterBase.prototype.exec = function (sql, args) {
        return this.performQuery(types_1.ResultMode.skip, sql, args);
    };
    return AdapterBase;
}());
exports.AdapterBase = AdapterBase;
