"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Transaction = exports.wrapperTransaction = exports.transaction = void 0;
var adapterBase_1 = require("./adapterBase");
var task_1 = require("./task");
var types_1 = require("../types");
var error_1 = require("./error");
var buffer_1 = require("./buffer");
var queries;
(function (queries) {
    queries["begin"] = "BEGIN";
    queries["commit"] = "COMMIT";
    queries["rollback"] = "ROLLBACK";
})(queries || (queries = {}));
var applyFn = function (proxy, fn) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fn(proxy)];
            case 1:
                _a.sent();
                proxy.commit();
                return [2 /*return*/];
        }
    });
}); };
var transaction = function (adapter, error, fn) {
    var t = new Transaction(adapter, error);
    var promises = [t.promise];
    if (fn)
        promises.push(applyFn(t, fn));
    return Promise.all(promises);
};
exports.transaction = transaction;
var wrapperTransaction = function (adapter, error, target, fn) {
    var t = new Transaction(adapter, error);
    var promises = [t.promise];
    var proxy = new Proxy(t, {
        get: function (t, name) {
            return t[name] || target[name];
        }
    });
    if (fn)
        promises.push(applyFn(proxy, fn));
    return Promise.all(promises);
};
exports.wrapperTransaction = wrapperTransaction;
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(adapter, error) {
        var _this = _super.call(this, { pool: 0, decodeTypes: adapter.decodeTypes, log: adapter.log }) || this;
        _this.failed = false;
        _this.afterBegin = function (socket, task) {
            var adapter = task.adapter;
            adapter.log.finish(socket, task);
            var index = adapter.sockets.indexOf(socket);
            adapter.sockets.splice(index, 1);
            _this.sockets[0] = socket;
            if (adapter.lastTask === task)
                adapter.lastTask = undefined;
            socket.task = undefined;
            task_1.next(_this, socket);
        };
        _this.finish = function (socket, task) {
            var transaction = task.adapter;
            transaction.log.finish(socket, task);
            var error = _this.failed ? _this.error : task.failed && task.error;
            error ? task.reject(error) : task.resolve(error);
            transaction.sockets.length = 0;
            transaction.task = task.next;
            transaction.adapter.sockets.push(socket);
            if (transaction.adapter.lastTask === task)
                transaction.adapter.lastTask = undefined;
            socket.task = undefined;
            task_1.next(transaction.adapter, socket);
        };
        _this["catch"] = function (err) {
            if (_this.failed)
                return;
            _this.error = err;
            _this.failed = true;
        };
        _this.adapter = adapter;
        _this.error = error;
        _this.resolve = buffer_1.noop;
        _this.reject = buffer_1.noop;
        _this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
        _this.adapter.connect();
        var task = task_1.createTask({
            adapter: _this.adapter,
            error: _this.error,
            resolve: buffer_1.noop,
            reject: buffer_1.noop,
            decodeTypes: _this.adapter.decodeTypes,
            mode: types_1.ResultMode.skip,
            query: queries.begin,
            finish: _this.afterBegin
        });
        task_1.addTaskToAdapter(_this.adapter, task);
        return _this;
    }
    Transaction.prototype.transaction = function () {
        var error = new error_1.PgError();
        return exports.transaction(this, error);
    };
    Transaction.prototype.commit = function () {
        return this.end(queries.commit);
    };
    Transaction.prototype.rollback = function () {
        return this.end(queries.rollback);
    };
    Transaction.prototype.end = function (query, err) {
        if (query === void 0) { query = queries.commit; }
        var task = task_1.createTask({
            query: query,
            adapter: this,
            error: err || this.error,
            resolve: this.resolve,
            reject: this.reject,
            finish: this.finish,
            decodeTypes: this.adapter.decodeTypes,
            mode: types_1.ResultMode.skip
        });
        task_1.addTaskToAdapter(this, task);
        return this;
    };
    Transaction.prototype.performQuery = function (mode, query, args, prepared, getFieldsInfo) {
        var promise = _super.prototype.performQuery.call(this, mode, query, args, prepared, getFieldsInfo);
        promise["catch"](this["catch"]);
        return promise;
    };
    Transaction.prototype.then = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.promise).then.apply(_a, args);
    };
    return Transaction;
}(adapterBase_1.AdapterBase));
exports.Transaction = Transaction;
