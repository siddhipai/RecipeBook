{"ast":null,"code":"var _jsxFileName = \"/Users/siddhi/higharc/ReceipeBook/recipes/src/components/RecipeList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Recipe from './Recipe';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction RecipeList() {\n  _s();\n\n  const [recipes, setRecipes] = useState([]);\n\n  const addRecipe = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTodos = [todo, ...recipes];\n    setRecipes(newTodos);\n    console.log(...recipes);\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => item.id === todoId ? newValue : item));\n  };\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n    setRecipes(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n    });\n    setRecipes(updatedTodos);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Recipe, {\n      todos: todos,\n      completeTodo: completeTodo,\n      removeTodo: removeTodo,\n      updateTodo: updateTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(RecipeList, \"O/YakigGclqCJkazvNfZLBlWnuY=\");\n\n_c = RecipeList;\nexport default RecipeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeList\");","map":{"version":3,"sources":["/Users/siddhi/higharc/ReceipeBook/recipes/src/components/RecipeList.js"],"names":["React","useState","TodoForm","Recipe","RecipeList","recipes","setRecipes","addRecipe","todo","text","test","newTodos","console","log","updateTodo","todoId","newValue","prev","map","item","id","removeTodo","removedArr","todos","filter","completeTodo","updatedTodos","isComplete"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMM,SAAS,GAAGC,IAAI,IAAI;AACxB,QAAI,CAACA,IAAI,CAACC,IAAN,IAAc,QAAQC,IAAR,CAAaF,IAAI,CAACC,IAAlB,CAAlB,EAA2C;AACzC;AACD;;AAED,UAAME,QAAQ,GAAG,CAACH,IAAD,EAAO,GAAGH,OAAV,CAAjB;AAEAC,IAAAA,UAAU,CAACK,QAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAGR,OAAf;AACD,GATD;;AAWA,QAAMS,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACvC,QAAI,CAACA,QAAQ,CAACP,IAAV,IAAkB,QAAQC,IAAR,CAAaM,QAAQ,CAACP,IAAtB,CAAtB,EAAmD;AACjD;AACD;;AAEDH,IAAAA,UAAU,CAACW,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYL,MAAZ,GAAqBC,QAArB,GAAgCG,IAAlD,CAAT,CAAV;AACD,GAND;;AAQA,QAAME,UAAU,GAAGD,EAAE,IAAI;AACvB,UAAME,UAAU,GAAG,CAAC,GAAGC,KAAJ,EAAWC,MAAX,CAAkBhB,IAAI,IAAIA,IAAI,CAACY,EAAL,KAAYA,EAAtC,CAAnB;AAEAd,IAAAA,UAAU,CAACgB,UAAD,CAAV;AACD,GAJD;;AAMA,QAAMG,YAAY,GAAGL,EAAE,IAAI;AACzB,QAAIM,YAAY,GAAGH,KAAK,CAACL,GAAN,CAAUV,IAAI,IAAI;AACnC,UAAIA,IAAI,CAACY,EAAL,KAAYA,EAAhB,EAAoB;AAClBZ,QAAAA,IAAI,CAACmB,UAAL,GAAkB,CAACnB,IAAI,CAACmB,UAAxB;AACD;;AACD,aAAOnB,IAAP;AACD,KALkB,CAAnB;AAMAF,IAAAA,UAAU,CAACoB,YAAD,CAAV;AACD,GARD;;AAUA,sBACE;AAAA,2BAEE,QAAC,MAAD;AACE,MAAA,KAAK,EAAEH,KADT;AAEE,MAAA,YAAY,EAAEE,YAFhB;AAGE,MAAA,UAAU,EAAEJ,UAHd;AAIE,MAAA,UAAU,EAAEP;AAJd;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AAWD;;GAjDQV,U;;KAAAA,U;AAmDT,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Recipe from './Recipe';\n\nfunction RecipeList() {\n  const [recipes, setRecipes] = useState([]);\n\n  const addRecipe = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTodos = [todo, ...recipes];\n\n    setRecipes(newTodos);\n    console.log(...recipes);\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n\n    setRecipes(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setRecipes(updatedTodos);\n  };\n\n  return (\n    <>\n      {/* <TodoForm onSubmit={addRecipe} /> */}\n      <Recipe\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\n\nexport default RecipeList;\n\n"]},"metadata":{},"sourceType":"module"}