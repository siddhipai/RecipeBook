{"ast":null,"code":"var _jsxFileName = \"/Users/siddhi/higharc/ReceipeBook/recipes/src/components/RecipeList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Recipe from './Recipe';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction RecipeList() {\n  _s();\n\n  const [recipes, setRecipes] = useState([]);\n\n  const addRecipe = recipe => {\n    if (!recipe.text || /^\\s*$/.test(recipe.text)) {\n      return;\n    }\n\n    const newRecipes = [recipe, ...recipes];\n    setRecipes(newRecipes);\n    console.log(...recipes);\n  };\n\n  const updateRecipe = (recipeId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => item.id === todoId ? newValue : item));\n  };\n\n  const removeRecipe = id => {\n    const removedArr = [...recipes].filter(todo => todo.id !== id);\n    setRecipes(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedRecipes = recipes.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n    });\n    setRecipes(updatedRecipes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Recipe, {\n      todos: todos,\n      completeTodo: completeTodo,\n      removeTodo: removeTodo,\n      updateTodo: updateTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(RecipeList, \"O/YakigGclqCJkazvNfZLBlWnuY=\");\n\n_c = RecipeList;\nexport default RecipeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeList\");","map":{"version":3,"sources":["/Users/siddhi/higharc/ReceipeBook/recipes/src/components/RecipeList.js"],"names":["React","useState","TodoForm","Recipe","RecipeList","recipes","setRecipes","addRecipe","recipe","text","test","newRecipes","console","log","updateRecipe","recipeId","newValue","prev","map","item","id","todoId","removeRecipe","removedArr","filter","todo","completeTodo","updatedRecipes","isComplete","todos","removeTodo","updateTodo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMM,SAAS,GAAGC,MAAM,IAAI;AAC1B,QAAI,CAACA,MAAM,CAACC,IAAR,IAAgB,QAAQC,IAAR,CAAaF,MAAM,CAACC,IAApB,CAApB,EAA+C;AAC7C;AACD;;AAED,UAAME,UAAU,GAAG,CAACH,MAAD,EAAS,GAAGH,OAAZ,CAAnB;AAEAC,IAAAA,UAAU,CAACK,UAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAGR,OAAf;AACD,GATD;;AAWA,QAAMS,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3C,QAAI,CAACA,QAAQ,CAACP,IAAV,IAAkB,QAAQC,IAAR,CAAaM,QAAQ,CAACP,IAAtB,CAAtB,EAAmD;AACjD;AACD;;AAEDH,IAAAA,UAAU,CAACW,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYC,MAAZ,GAAqBL,QAArB,GAAgCG,IAAlD,CAAT,CAAV;AACD,GAND;;AAQA,QAAMG,YAAY,GAAGF,EAAE,IAAI;AACzB,UAAMG,UAAU,GAAG,CAAC,GAAGlB,OAAJ,EAAamB,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAxC,CAAnB;AAEAd,IAAAA,UAAU,CAACiB,UAAD,CAAV;AACD,GAJD;;AAMA,QAAMG,YAAY,GAAGN,EAAE,IAAI;AACzB,QAAIO,cAAc,GAAGtB,OAAO,CAACa,GAAR,CAAYO,IAAI,IAAI;AACvC,UAAIA,IAAI,CAACL,EAAL,KAAYA,EAAhB,EAAoB;AAClBK,QAAAA,IAAI,CAACG,UAAL,GAAkB,CAACH,IAAI,CAACG,UAAxB;AACD;;AACD,aAAOH,IAAP;AACD,KALoB,CAArB;AAMAnB,IAAAA,UAAU,CAACqB,cAAD,CAAV;AACD,GARD;;AAUA,sBACE;AAAA,2BAEE,QAAC,MAAD;AACE,MAAA,KAAK,EAAEE,KADT;AAEE,MAAA,YAAY,EAAEH,YAFhB;AAGE,MAAA,UAAU,EAAEI,UAHd;AAIE,MAAA,UAAU,EAAEC;AAJd;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AAWD;;GAjDQ3B,U;;KAAAA,U;AAmDT,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Recipe from './Recipe';\n\nfunction RecipeList() {\n  const [recipes, setRecipes] = useState([]);\n\n  const addRecipe = recipe => {\n    if (!recipe.text || /^\\s*$/.test(recipe.text)) {\n      return;\n    }\n\n    const newRecipes = [recipe, ...recipes];\n\n    setRecipes(newRecipes);\n    console.log(...recipes);\n  };\n\n  const updateRecipe = (recipeId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  const removeRecipe = id => {\n    const removedArr = [...recipes].filter(todo => todo.id !== id);\n\n    setRecipes(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedRecipes = recipes.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setRecipes(updatedRecipes);\n  };\n\n  return (\n    <>\n      {/* <TodoForm onSubmit={addRecipe} /> */}\n      <Recipe\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\n\nexport default RecipeList;\n\n"]},"metadata":{},"sourceType":"module"}